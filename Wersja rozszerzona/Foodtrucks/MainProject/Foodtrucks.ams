## ams_version=1.0

Model Main_Foodtrucks {
	MathematicalProgram HighestCostPlan {
		Objective: TotalCost;
		Direction: maximize;
		Constraints: AllConstraints;
		Variables: AllVariables;
		Text: "Funkcja celu";
		Type: MIP;
	}
	Variable TotalCost {
		Text: "Funckja celu";
		Range: free;
		Definition: SellCost - EmployeesCost - WorkCost;
		Comment: {
			"SellCost - EmployeesCost
			sum(i,Visited(i))"
		}
	}
	Variable EmployeesCost {
		Text: "Koszt zatrudnienia pracownika [zł]";
		Range: free;
		Definition: EmployeeCost*sum[k, VEmployees(k)];
		Comment: {
			"EmployeeCost * sum[k, VEmployees(k)* sum[i | i in VisitedPlaces(k), Time(i)]]
			EmployeeCost*sum[i,Time(i)]"
		}
	}
	Variable WorkCost {
		Text: "Koszt czasu pracy foodtrucka [zł]";
		Range: free;
		Definition: MealSellCost*sum[i,Time(i)];
	}
	Variable SellCost {
		Text: "Całkowity zysk ze sprzedazy posiłków w odwiedzonych punktach [zł]";
		Range: free;
		Definition: sum[i, MealCost*Profits(i)*PlaceTime*Visited(i)];
	}
	Variable VEmployees {
		IndexDomain: k;
		Text: "Liczba pracowników foodtrucka k";
		Range: integer;
	}
	Variable Time {
		IndexDomain: i;
		Text: "Czas spędzony w punkcie i";
		Range: nonnegative;
	}
	Variable Visited {
		IndexDomain: i;
		Text: "Odwiedzone punkty";
		Range: binary;
	}
	Variable VehicleTimes {
		IndexDomain: k;
		Text: "Czas pracy foodtrucków";
		Range: free;
		Definition: sum[i | i in VisitedPlaces(k), Time(i)];
	}
	Parameter Profits {
		IndexDomain: i;
		Text: "Zapotrzebowanie w punkcie [ilość/h]";
		Definition: data { A : 487,  B : 937,  C : 813,  D : 565,  E : 308,  F : 758,  G : 512,  H : 769,  I : 806 };
	}
	Parameter VehicleTime {
		Text: "Maksymalny czas pracy jednego foodtrucka [h]";
		Definition: 8;
	}
	Parameter MealTime {
		Text: "Bazowy czas (w minutach) potrzebny na wydanie jednego posiłku w przypadku obsługi przez jednego pracownika";
		Definition: .5;
	}
	Parameter PlaceTime {
		Text: "Czas postoju w punkcie [h]";
		Definition: 2;
	}
	Parameter NoOfEmployees {
		Text: "Maksymalna liczba pracowników sprzedających posiłki w jednym foodtrucku";
		Range: integer;
		Definition: 8;
	}
	Parameter MealCost {
		Text: "Koszt sprzedawanego posiłku [zł]";
		Range: nonnegative;
		Definition: 15;
	}
	Parameter EmployeeCost {
		Text: "Koszt zatrudnienia pracownika [zł]";
		Range: nonnegative;
		Definition: 100;
	}
	Parameter MealSellCost {
		Text: "Koszt sprzedaży (czasu pracy foodtrucka) [zł/h]";
		Range: nonnegative;
		Definition: 18;
	}
	Parameter NumberOfVehicles {
		Text: "Liczba foodtrucków";
		Range: {
			{1..maxint}
		}
		Default: 3;
	}
	Parameter NeedSellPTime {
		IndexDomain: (i,p);
		Text: "Estymowany czas sprzedazy posiłków w punkcie i w zalezności od liczy pracowników (p)";
		Definition: (Profits(i)*PlaceTime*MealTime - p*MealTime*KEffectivityTime)/60;
	}
	Parameter AvgProfit {
		Text: "srednie zapotrzebowanie wśród wszystkich punktów sprzedazy";
		Definition: sum(i,Profits(i))/9;
	}
	Parameter KEffectivityTime {
		Text: "ile jeden pracownik może średnio sprzedać posików w punktach sprzedaży";
		Definition: AvgProfit*PlaceTime/NoOfEmployees;
	}
	Set Vehicles {
		SubsetOf: Integers;
		Text: "Trasy (ciężarówki)";
		Index: k;
		Definition: {
			{1 .. NumberOfVehicles}
		}
	}
	Set Employees {
		SubsetOf: Integers;
		Text: "Dostępni pracownicy";
		Index: p;
		Definition: {
			{0..NoOfEmployees}
		}
	}
	Set Places {
		Text: "Punkty sprzedaży";
		Index: i;
		Definition: data { A,B,C,D,E,F,G,H,I };
	}
	Set VisitedPlaces {
		IndexDomain: k;
		SubsetOf: Places;
		Text: "Odwiedzone punkty przez foodtrucki";
		Definition: {
			data 
			    { 1 : { C, D } ,
			      2 : { A, B, E, F } ,
			      3 : { G, H, I } } ;
		}
	}
	Constraint VehicleTimeConstraint {
		IndexDomain: k;
		Text: "Czas pracy foodtrucka nie może być większy niż maksymalny czas pracy foodtrucka";
		Definition: VehicleTimes(k) <= VehicleTime;
		Comment: "sum[i | i in VisitedPlaces(k), Time(i)] <= VehicleTime";
	}
	Constraint EmployeeConstraint {
		IndexDomain: k;
		Text: "Liczba pracowników w ciężarówce nie może być większa niż maksymalna liczba pracowników foodtrucka";
		Definition: VEmployees(k) <= NoOfEmployees;
		Comment: "1 <= VEmployees(k) <= NoOfEmployees";
	}
	Constraint EffectivityTimeConstraint {
		IndexDomain: (i,k) | i in VisitedPlaces(k);
		Text: "Czas jest zależny od liczby pracowników i decyzji o odwiedzeniu punktów";
		Definition: Time(i) >= (Visited(i)*Profits(i)*PlaceTime*MealTime - VEmployees(k)*MealTime*KEffectivityTime)/60;
		Comment: {
			"Time(i) = Visited(i)*Profits(i)*PlaceTime*Effectivity(k)/60
			Time(i) >= Visited(i)*Profits(i)*PlaceTime*MealTime/60 - Effectivity(k)/60"
		}
	}
	Constraint PlaceTimeConstraint {
		IndexDomain: i;
		Text: "Ograniczenie na czas postoju (dobrze w testach użyć)";
		Definition: 1=1;
		Comment: "Time(i) <= PlaceTime";
	}
	Constraint WorkTimeConstraint {
		IndexDomain: (i,k) | i in VisitedPlaces(k);
		Text: "funkcja f(p) nie może być mniejsza niż czas potrzebny na sprzedaż wszystkich możliwych posiłków w punkcie i";
		Definition: Profits(i)*PlaceTime*MealTime - VEmployees(k)*MealTime*KEffectivityTime >= 0;
		Comment: "Profits(i)*PlaceTime*MealTime - VEmployees(k)*MealTime*MinProfit >= 0";
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			solve HighestCostPlan;
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
